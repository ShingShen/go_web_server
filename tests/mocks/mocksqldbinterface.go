// Code generated by MockGen. DO NOT EDIT.
// Source: utils/sqloperator/sqloperatorinterface.go

// Package mock_sqloperator is a generated GoMock package.
package mock_sqloperator

import (
	context "context"
	sql "database/sql"
	driver "database/sql/driver"
	reflect "reflect"
	sqloperator "server/utils/sqloperator"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockISqlDB is a mock of ISqlDB interface.
type MockISqlDB struct {
	ctrl     *gomock.Controller
	recorder *MockISqlDBMockRecorder
}

// MockISqlDBMockRecorder is the mock recorder for MockISqlDB.
type MockISqlDBMockRecorder struct {
	mock *MockISqlDB
}

// NewMockISqlDB creates a new mock instance.
func NewMockISqlDB(ctrl *gomock.Controller) *MockISqlDB {
	mock := &MockISqlDB{ctrl: ctrl}
	mock.recorder = &MockISqlDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlDB) EXPECT() *MockISqlDBMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockISqlDB) Begin() (sqloperator.ISqlTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(sqloperator.ISqlTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockISqlDBMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockISqlDB)(nil).Begin))
}

// BeginTx mocks base method.
func (m *MockISqlDB) BeginTx(ctx context.Context, opts *sql.TxOptions) (sqloperator.ISqlTx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(sqloperator.ISqlTx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockISqlDBMockRecorder) BeginTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockISqlDB)(nil).BeginTx), ctx, opts)
}

// Close mocks base method.
func (m *MockISqlDB) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockISqlDBMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockISqlDB)(nil).Close))
}

// Conn mocks base method.
func (m *MockISqlDB) Conn(ctx context.Context) (sqloperator.ISqlConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn", ctx)
	ret0, _ := ret[0].(sqloperator.ISqlConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Conn indicates an expected call of Conn.
func (mr *MockISqlDBMockRecorder) Conn(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockISqlDB)(nil).Conn), ctx)
}

// Driver mocks base method.
func (m *MockISqlDB) Driver() sqloperator.IDriver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(sqloperator.IDriver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockISqlDBMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockISqlDB)(nil).Driver))
}

// Exec mocks base method.
func (m *MockISqlDB) Exec(query string, args ...any) (sqloperator.ISqlResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sqloperator.ISqlResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockISqlDBMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockISqlDB)(nil).Exec), varargs...)
}

// ExecContext mocks base method.
func (m *MockISqlDB) ExecContext(ctx context.Context, query string, args ...any) (sqloperator.ISqlResult, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sqloperator.ISqlResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockISqlDBMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockISqlDB)(nil).ExecContext), varargs...)
}

// Ping mocks base method.
func (m *MockISqlDB) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockISqlDBMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockISqlDB)(nil).Ping))
}

// PingContext mocks base method.
func (m *MockISqlDB) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockISqlDBMockRecorder) PingContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockISqlDB)(nil).PingContext), ctx)
}

// Prepare mocks base method.
func (m *MockISqlDB) Prepare(query string) (sqloperator.ISqlStmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(sqloperator.ISqlStmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockISqlDBMockRecorder) Prepare(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockISqlDB)(nil).Prepare), query)
}

// Query mocks base method.
func (m *MockISqlDB) Query(query string, args ...any) (sqloperator.ISqlRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(sqloperator.ISqlRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockISqlDBMockRecorder) Query(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockISqlDB)(nil).Query), varargs...)
}

// QueryContext mocks base method.
func (m *MockISqlDB) QueryContext(ctx context.Context, query string, args ...any) (sqloperator.ISqlRows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(sqloperator.ISqlRows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockISqlDBMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockISqlDB)(nil).QueryContext), varargs...)
}

// QueryRow mocks base method.
func (m *MockISqlDB) QueryRow(query string, args ...any) sqloperator.ISqlRow {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(sqloperator.ISqlRow)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockISqlDBMockRecorder) QueryRow(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockISqlDB)(nil).QueryRow), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockISqlDB) QueryRowContext(ctx context.Context, query string, args ...any) sqloperator.ISqlRow {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(sqloperator.ISqlRow)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockISqlDBMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockISqlDB)(nil).QueryRowContext), varargs...)
}

// SetConnMaxIdleTime mocks base method.
func (m *MockISqlDB) SetConnMaxIdleTime(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxIdleTime", d)
}

// SetConnMaxIdleTime indicates an expected call of SetConnMaxIdleTime.
func (mr *MockISqlDBMockRecorder) SetConnMaxIdleTime(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxIdleTime", reflect.TypeOf((*MockISqlDB)(nil).SetConnMaxIdleTime), d)
}

// SetConnMaxLifetime mocks base method.
func (m *MockISqlDB) SetConnMaxLifetime(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxLifetime", d)
}

// SetConnMaxLifetime indicates an expected call of SetConnMaxLifetime.
func (mr *MockISqlDBMockRecorder) SetConnMaxLifetime(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxLifetime", reflect.TypeOf((*MockISqlDB)(nil).SetConnMaxLifetime), d)
}

// SetMaxIdleConns mocks base method.
func (m *MockISqlDB) SetMaxIdleConns(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxIdleConns", n)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns.
func (mr *MockISqlDBMockRecorder) SetMaxIdleConns(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockISqlDB)(nil).SetMaxIdleConns), n)
}

// SetMaxOpenConns mocks base method.
func (m *MockISqlDB) SetMaxOpenConns(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxOpenConns", n)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns.
func (mr *MockISqlDBMockRecorder) SetMaxOpenConns(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockISqlDB)(nil).SetMaxOpenConns), n)
}

// Stats mocks base method.
func (m *MockISqlDB) Stats() sqloperator.ISqlDBStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(sqloperator.ISqlDBStats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockISqlDBMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockISqlDB)(nil).Stats))
}

// MockIDb is a mock of IDb interface.
type MockIDb struct {
	ctrl     *gomock.Controller
	recorder *MockIDbMockRecorder
}

// MockIDbMockRecorder is the mock recorder for MockIDb.
type MockIDbMockRecorder struct {
	mock *MockIDb
}

// NewMockIDb creates a new mock instance.
func NewMockIDb(ctrl *gomock.Controller) *MockIDb {
	mock := &MockIDb{ctrl: ctrl}
	mock.recorder = &MockIDbMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDb) EXPECT() *MockIDbMockRecorder {
	return m.recorder
}

// Begin mocks base method.
func (m *MockIDb) Begin() (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin.
func (mr *MockIDbMockRecorder) Begin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockIDb)(nil).Begin))
}

// BeginTx mocks base method.
func (m *MockIDb) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockIDbMockRecorder) BeginTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockIDb)(nil).BeginTx), ctx, opts)
}

// Close mocks base method.
func (m *MockIDb) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIDbMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIDb)(nil).Close))
}

// Conn mocks base method.
func (m *MockIDb) Conn(ctx context.Context) (*sql.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Conn", ctx)
	ret0, _ := ret[0].(*sql.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Conn indicates an expected call of Conn.
func (mr *MockIDbMockRecorder) Conn(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Conn", reflect.TypeOf((*MockIDb)(nil).Conn), ctx)
}

// Driver mocks base method.
func (m *MockIDb) Driver() driver.Driver {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Driver")
	ret0, _ := ret[0].(driver.Driver)
	return ret0
}

// Driver indicates an expected call of Driver.
func (mr *MockIDbMockRecorder) Driver() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Driver", reflect.TypeOf((*MockIDb)(nil).Driver))
}

// Exec mocks base method.
func (m *MockIDb) Exec(query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockIDbMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockIDb)(nil).Exec), varargs...)
}

// ExecContext mocks base method.
func (m *MockIDb) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockIDbMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockIDb)(nil).ExecContext), varargs...)
}

// Ping mocks base method.
func (m *MockIDb) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockIDbMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockIDb)(nil).Ping))
}

// PingContext mocks base method.
func (m *MockIDb) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockIDbMockRecorder) PingContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockIDb)(nil).PingContext), ctx)
}

// Prepare mocks base method.
func (m *MockIDb) Prepare(query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockIDbMockRecorder) Prepare(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockIDb)(nil).Prepare), query)
}

// PrepareContext mocks base method.
func (m *MockIDb) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockIDbMockRecorder) PrepareContext(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockIDb)(nil).PrepareContext), ctx, query)
}

// Query mocks base method.
func (m *MockIDb) Query(query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockIDbMockRecorder) Query(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockIDb)(nil).Query), varargs...)
}

// QueryContext mocks base method.
func (m *MockIDb) QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockIDbMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockIDb)(nil).QueryContext), varargs...)
}

// QueryRow mocks base method.
func (m *MockIDb) QueryRow(query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockIDbMockRecorder) QueryRow(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockIDb)(nil).QueryRow), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockIDb) QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockIDbMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockIDb)(nil).QueryRowContext), varargs...)
}

// SetConnMaxIdleTime mocks base method.
func (m *MockIDb) SetConnMaxIdleTime(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxIdleTime", d)
}

// SetConnMaxIdleTime indicates an expected call of SetConnMaxIdleTime.
func (mr *MockIDbMockRecorder) SetConnMaxIdleTime(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxIdleTime", reflect.TypeOf((*MockIDb)(nil).SetConnMaxIdleTime), d)
}

// SetConnMaxLifetime mocks base method.
func (m *MockIDb) SetConnMaxLifetime(d time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxLifetime", d)
}

// SetConnMaxLifetime indicates an expected call of SetConnMaxLifetime.
func (mr *MockIDbMockRecorder) SetConnMaxLifetime(d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxLifetime", reflect.TypeOf((*MockIDb)(nil).SetConnMaxLifetime), d)
}

// SetMaxIdleConns mocks base method.
func (m *MockIDb) SetMaxIdleConns(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxIdleConns", n)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns.
func (mr *MockIDbMockRecorder) SetMaxIdleConns(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockIDb)(nil).SetMaxIdleConns), n)
}

// SetMaxOpenConns mocks base method.
func (m *MockIDb) SetMaxOpenConns(n int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxOpenConns", n)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns.
func (mr *MockIDbMockRecorder) SetMaxOpenConns(n interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockIDb)(nil).SetMaxOpenConns), n)
}

// Stats mocks base method.
func (m *MockIDb) Stats() sql.DBStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats")
	ret0, _ := ret[0].(sql.DBStats)
	return ret0
}

// Stats indicates an expected call of Stats.
func (mr *MockIDbMockRecorder) Stats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockIDb)(nil).Stats))
}

// MockISqlTx is a mock of ISqlTx interface.
type MockISqlTx struct {
	ctrl     *gomock.Controller
	recorder *MockISqlTxMockRecorder
}

// MockISqlTxMockRecorder is the mock recorder for MockISqlTx.
type MockISqlTxMockRecorder struct {
	mock *MockISqlTx
}

// NewMockISqlTx creates a new mock instance.
func NewMockISqlTx(ctrl *gomock.Controller) *MockISqlTx {
	mock := &MockISqlTx{ctrl: ctrl}
	mock.recorder = &MockISqlTxMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlTx) EXPECT() *MockISqlTxMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockISqlTx) Commit() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockISqlTxMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockISqlTx)(nil).Commit))
}

// Exec mocks base method.
func (m *MockISqlTx) Exec(query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockISqlTxMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockISqlTx)(nil).Exec), varargs...)
}

// ExecContext mocks base method.
func (m *MockISqlTx) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockISqlTxMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockISqlTx)(nil).ExecContext), varargs...)
}

// Prepare mocks base method.
func (m *MockISqlTx) Prepare(query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Prepare", query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare.
func (mr *MockISqlTxMockRecorder) Prepare(query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockISqlTx)(nil).Prepare), query)
}

// PrepareContext mocks base method.
func (m *MockISqlTx) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockISqlTxMockRecorder) PrepareContext(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockISqlTx)(nil).PrepareContext), ctx, query)
}

// Query mocks base method.
func (m *MockISqlTx) Query(query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockISqlTxMockRecorder) Query(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockISqlTx)(nil).Query), varargs...)
}

// QueryContext mocks base method.
func (m *MockISqlTx) QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockISqlTxMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockISqlTx)(nil).QueryContext), varargs...)
}

// QueryRow mocks base method.
func (m *MockISqlTx) QueryRow(query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockISqlTxMockRecorder) QueryRow(query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockISqlTx)(nil).QueryRow), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockISqlTx) QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockISqlTxMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockISqlTx)(nil).QueryRowContext), varargs...)
}

// Rollback mocks base method.
func (m *MockISqlTx) Rollback() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockISqlTxMockRecorder) Rollback() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockISqlTx)(nil).Rollback))
}

// Stmt mocks base method.
func (m *MockISqlTx) Stmt(stmt *sql.Stmt) *sql.Stmt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stmt", stmt)
	ret0, _ := ret[0].(*sql.Stmt)
	return ret0
}

// Stmt indicates an expected call of Stmt.
func (mr *MockISqlTxMockRecorder) Stmt(stmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stmt", reflect.TypeOf((*MockISqlTx)(nil).Stmt), stmt)
}

// StmtContext mocks base method.
func (m *MockISqlTx) StmtContext(ctx context.Context, stmt *sql.Stmt) *sql.Stmt {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StmtContext", ctx, stmt)
	ret0, _ := ret[0].(*sql.Stmt)
	return ret0
}

// StmtContext indicates an expected call of StmtContext.
func (mr *MockISqlTxMockRecorder) StmtContext(ctx, stmt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StmtContext", reflect.TypeOf((*MockISqlTx)(nil).StmtContext), ctx, stmt)
}

// MockISqlConn is a mock of ISqlConn interface.
type MockISqlConn struct {
	ctrl     *gomock.Controller
	recorder *MockISqlConnMockRecorder
}

// MockISqlConnMockRecorder is the mock recorder for MockISqlConn.
type MockISqlConnMockRecorder struct {
	mock *MockISqlConn
}

// NewMockISqlConn creates a new mock instance.
func NewMockISqlConn(ctrl *gomock.Controller) *MockISqlConn {
	mock := &MockISqlConn{ctrl: ctrl}
	mock.recorder = &MockISqlConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlConn) EXPECT() *MockISqlConnMockRecorder {
	return m.recorder
}

// BeginTx mocks base method.
func (m *MockISqlConn) BeginTx(ctx context.Context, opts *sql.TxOptions) (*sql.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTx", ctx, opts)
	ret0, _ := ret[0].(*sql.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginTx indicates an expected call of BeginTx.
func (mr *MockISqlConnMockRecorder) BeginTx(ctx, opts interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTx", reflect.TypeOf((*MockISqlConn)(nil).BeginTx), ctx, opts)
}

// Close mocks base method.
func (m *MockISqlConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockISqlConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockISqlConn)(nil).Close))
}

// ExecContext mocks base method.
func (m *MockISqlConn) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockISqlConnMockRecorder) ExecContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockISqlConn)(nil).ExecContext), varargs...)
}

// PingContext mocks base method.
func (m *MockISqlConn) PingContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingContext indicates an expected call of PingContext.
func (mr *MockISqlConnMockRecorder) PingContext(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingContext", reflect.TypeOf((*MockISqlConn)(nil).PingContext), ctx)
}

// PrepareContext mocks base method.
func (m *MockISqlConn) PrepareContext(ctx context.Context, query string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareContext", ctx, query)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrepareContext indicates an expected call of PrepareContext.
func (mr *MockISqlConnMockRecorder) PrepareContext(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareContext", reflect.TypeOf((*MockISqlConn)(nil).PrepareContext), ctx, query)
}

// QueryContext mocks base method.
func (m *MockISqlConn) QueryContext(ctx context.Context, query string, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockISqlConnMockRecorder) QueryContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockISqlConn)(nil).QueryContext), varargs...)
}

// QueryRowContext mocks base method.
func (m *MockISqlConn) QueryRowContext(ctx context.Context, query string, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockISqlConnMockRecorder) QueryRowContext(ctx, query interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockISqlConn)(nil).QueryRowContext), varargs...)
}

// Raw mocks base method.
func (m *MockISqlConn) Raw(f func(any) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Raw", f)
	ret0, _ := ret[0].(error)
	return ret0
}

// Raw indicates an expected call of Raw.
func (mr *MockISqlConnMockRecorder) Raw(f interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Raw", reflect.TypeOf((*MockISqlConn)(nil).Raw), f)
}

// MockIDriver is a mock of IDriver interface.
type MockIDriver struct {
	ctrl     *gomock.Controller
	recorder *MockIDriverMockRecorder
}

// MockIDriverMockRecorder is the mock recorder for MockIDriver.
type MockIDriverMockRecorder struct {
	mock *MockIDriver
}

// NewMockIDriver creates a new mock instance.
func NewMockIDriver(ctrl *gomock.Controller) *MockIDriver {
	mock := &MockIDriver{ctrl: ctrl}
	mock.recorder = &MockIDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDriver) EXPECT() *MockIDriverMockRecorder {
	return m.recorder
}

// Open mocks base method.
func (m *MockIDriver) Open(name string) (driver.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(driver.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockIDriverMockRecorder) Open(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockIDriver)(nil).Open), name)
}

// MockISqlStmt is a mock of ISqlStmt interface.
type MockISqlStmt struct {
	ctrl     *gomock.Controller
	recorder *MockISqlStmtMockRecorder
}

// MockISqlStmtMockRecorder is the mock recorder for MockISqlStmt.
type MockISqlStmtMockRecorder struct {
	mock *MockISqlStmt
}

// NewMockISqlStmt creates a new mock instance.
func NewMockISqlStmt(ctrl *gomock.Controller) *MockISqlStmt {
	mock := &MockISqlStmt{ctrl: ctrl}
	mock.recorder = &MockISqlStmtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlStmt) EXPECT() *MockISqlStmtMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockISqlStmt) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockISqlStmtMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockISqlStmt)(nil).Close))
}

// Exec mocks base method.
func (m *MockISqlStmt) Exec(args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec.
func (mr *MockISqlStmtMockRecorder) Exec(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockISqlStmt)(nil).Exec), args...)
}

// ExecContext mocks base method.
func (m *MockISqlStmt) ExecContext(ctx context.Context, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockISqlStmtMockRecorder) ExecContext(ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*MockISqlStmt)(nil).ExecContext), varargs...)
}

// Query mocks base method.
func (m *MockISqlStmt) Query(args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query.
func (mr *MockISqlStmtMockRecorder) Query(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockISqlStmt)(nil).Query), args...)
}

// QueryContext mocks base method.
func (m *MockISqlStmt) QueryContext(ctx context.Context, args ...any) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryContext", varargs...)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryContext indicates an expected call of QueryContext.
func (mr *MockISqlStmtMockRecorder) QueryContext(ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryContext", reflect.TypeOf((*MockISqlStmt)(nil).QueryContext), varargs...)
}

// QueryRow mocks base method.
func (m *MockISqlStmt) QueryRow(args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRow", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRow indicates an expected call of QueryRow.
func (mr *MockISqlStmtMockRecorder) QueryRow(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRow", reflect.TypeOf((*MockISqlStmt)(nil).QueryRow), args...)
}

// QueryRowContext mocks base method.
func (m *MockISqlStmt) QueryRowContext(ctx context.Context, args ...any) *sql.Row {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "QueryRowContext", varargs...)
	ret0, _ := ret[0].(*sql.Row)
	return ret0
}

// QueryRowContext indicates an expected call of QueryRowContext.
func (mr *MockISqlStmtMockRecorder) QueryRowContext(ctx interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRowContext", reflect.TypeOf((*MockISqlStmt)(nil).QueryRowContext), varargs...)
}

// MockISqlDBStats is a mock of ISqlDBStats interface.
type MockISqlDBStats struct {
	ctrl     *gomock.Controller
	recorder *MockISqlDBStatsMockRecorder
}

// MockISqlDBStatsMockRecorder is the mock recorder for MockISqlDBStats.
type MockISqlDBStatsMockRecorder struct {
	mock *MockISqlDBStats
}

// NewMockISqlDBStats creates a new mock instance.
func NewMockISqlDBStats(ctrl *gomock.Controller) *MockISqlDBStats {
	mock := &MockISqlDBStats{ctrl: ctrl}
	mock.recorder = &MockISqlDBStatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlDBStats) EXPECT() *MockISqlDBStatsMockRecorder {
	return m.recorder
}

// MockISqlResult is a mock of ISqlResult interface.
type MockISqlResult struct {
	ctrl     *gomock.Controller
	recorder *MockISqlResultMockRecorder
}

// MockISqlResultMockRecorder is the mock recorder for MockISqlResult.
type MockISqlResultMockRecorder struct {
	mock *MockISqlResult
}

// NewMockISqlResult creates a new mock instance.
func NewMockISqlResult(ctrl *gomock.Controller) *MockISqlResult {
	mock := &MockISqlResult{ctrl: ctrl}
	mock.recorder = &MockISqlResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlResult) EXPECT() *MockISqlResultMockRecorder {
	return m.recorder
}

// LastInsertId mocks base method.
func (m *MockISqlResult) LastInsertId() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastInsertId")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastInsertId indicates an expected call of LastInsertId.
func (mr *MockISqlResultMockRecorder) LastInsertId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastInsertId", reflect.TypeOf((*MockISqlResult)(nil).LastInsertId))
}

// RowsAffected mocks base method.
func (m *MockISqlResult) RowsAffected() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RowsAffected")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RowsAffected indicates an expected call of RowsAffected.
func (mr *MockISqlResultMockRecorder) RowsAffected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RowsAffected", reflect.TypeOf((*MockISqlResult)(nil).RowsAffected))
}

// MockISqlRows is a mock of ISqlRows interface.
type MockISqlRows struct {
	ctrl     *gomock.Controller
	recorder *MockISqlRowsMockRecorder
}

// MockISqlRowsMockRecorder is the mock recorder for MockISqlRows.
type MockISqlRowsMockRecorder struct {
	mock *MockISqlRows
}

// NewMockISqlRows creates a new mock instance.
func NewMockISqlRows(ctrl *gomock.Controller) *MockISqlRows {
	mock := &MockISqlRows{ctrl: ctrl}
	mock.recorder = &MockISqlRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlRows) EXPECT() *MockISqlRowsMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockISqlRows) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockISqlRowsMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockISqlRows)(nil).Close))
}

// ColumnTypes mocks base method.
func (m *MockISqlRows) ColumnTypes() ([]*sql.ColumnType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ColumnTypes")
	ret0, _ := ret[0].([]*sql.ColumnType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ColumnTypes indicates an expected call of ColumnTypes.
func (mr *MockISqlRowsMockRecorder) ColumnTypes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ColumnTypes", reflect.TypeOf((*MockISqlRows)(nil).ColumnTypes))
}

// Columns mocks base method.
func (m *MockISqlRows) Columns() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Columns")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Columns indicates an expected call of Columns.
func (mr *MockISqlRowsMockRecorder) Columns() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Columns", reflect.TypeOf((*MockISqlRows)(nil).Columns))
}

// Err mocks base method.
func (m *MockISqlRows) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockISqlRowsMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockISqlRows)(nil).Err))
}

// Next mocks base method.
func (m *MockISqlRows) Next() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockISqlRowsMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockISqlRows)(nil).Next))
}

// NextResultSet mocks base method.
func (m *MockISqlRows) NextResultSet() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NextResultSet")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NextResultSet indicates an expected call of NextResultSet.
func (mr *MockISqlRowsMockRecorder) NextResultSet() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextResultSet", reflect.TypeOf((*MockISqlRows)(nil).NextResultSet))
}

// Scan mocks base method.
func (m *MockISqlRows) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockISqlRowsMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockISqlRows)(nil).Scan), dest...)
}

// MockISqlRow is a mock of ISqlRow interface.
type MockISqlRow struct {
	ctrl     *gomock.Controller
	recorder *MockISqlRowMockRecorder
}

// MockISqlRowMockRecorder is the mock recorder for MockISqlRow.
type MockISqlRowMockRecorder struct {
	mock *MockISqlRow
}

// NewMockISqlRow creates a new mock instance.
func NewMockISqlRow(ctrl *gomock.Controller) *MockISqlRow {
	mock := &MockISqlRow{ctrl: ctrl}
	mock.recorder = &MockISqlRowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockISqlRow) EXPECT() *MockISqlRowMockRecorder {
	return m.recorder
}

// Err mocks base method.
func (m *MockISqlRow) Err() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err.
func (mr *MockISqlRowMockRecorder) Err() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockISqlRow)(nil).Err))
}

// Scan mocks base method.
func (m *MockISqlRow) Scan(dest ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range dest {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan.
func (mr *MockISqlRowMockRecorder) Scan(dest ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockISqlRow)(nil).Scan), dest...)
}
